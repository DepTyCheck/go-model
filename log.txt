[ info ] Found local config at /home/user/Projects/deptycheck-go/go-model/pack.toml
[ info ] Using package collection nightly-250214
[ build ] 2/4: Building Language.Go.Derived.Expr (src/Language/Go/Derived/Expr.idr)
[ build ] LOG deptycheck.derive.namesInfo:5: ____ start ____
[ build ] LOG deptycheck.derive.namesInfo:5: ^^^^  end  ^^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.Expr[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] IntLiteral __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] IntLiteral - determ: {#0 (ctxt) -> <=[] ->[], #1 (x) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] IntLiteral - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0, 1] IntLiteral - used final order: [#1 (x)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] IntLiteral ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] BoolLiteral __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] BoolLiteral - determ: {#0 (ctxt) -> <=[] ->[], #1 (x) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] BoolLiteral - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0, 1] BoolLiteral - used final order: [#1 (x)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] BoolLiteral ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] GetVar __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] GetVar - determ: {#0 (ty) -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 (idx) -> <=[#1 (ctxt)] ->[], #3 -> <=[#1 (ctxt)] ->[#0 (ty), #2 (idx)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] GetVar - givs: [#0 (ty), #1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0, 1] GetVar - used final order: [#3]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] GetVar ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] SpecForm __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] SpecForm - determ: {#0 (res) -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 -> <=[] ->[#0 (res), #1 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] SpecForm - givs: [#0 (res), #1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0, 1] SpecForm - used final order: [#2]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] SpecForm ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] CallNamed __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] CallNamed - determ: {#0 (ctxt) -> <=[] ->[], #1 (parTypes) -> <=[] ->[], #2 (retTypes) -> <=[] ->[], #3 (idx) -> <=[#0 (ctxt)] ->[], #4 -> <=[#0 (ctxt), #1 (parTypes), #2 (retTypes)] ->[#3 (idx)], #5 (params) -> <=[] ->[#0 (ctxt), #1 (parTypes)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0, 1] CallNamed - givs: [#0 (ctxt), #2 (retTypes)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0, 1] CallNamed - used final order: [#1 (parTypes), #4, #5 (params)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0, 1] CallNamed ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.Expr[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.Expr[0, 1] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.Expr[0, 1] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.Types[] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Types[] Nil __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Types[] Nil - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Types[] Nil - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Types[] Nil - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Types[] Nil ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Types[] (::) __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Types[] (::) - determ: {#0 -> <=[] ->[], #1 -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Types[] (::) - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Types[] (::) - used final order: [#0, #1]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Types[] (::) ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.Types[] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.Types[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.Types[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.SpecialForm[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] Print __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] Print - determ: {#0 -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 (arg) -> <=[] ->[#0, #1 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] Print - givs: [#1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] Print - used final order: [#2 (arg)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] Print ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntAdd __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntAdd - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntAdd - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] IntAdd - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntAdd ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntSub __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntSub - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntSub - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] IntSub - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntSub ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntMul __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntMul - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] IntMul - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] IntMul - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] IntMul ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolAnd __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolAnd - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolAnd - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] BoolAnd - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolAnd ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolOr __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolOr - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolOr - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] BoolOr - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolOr ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolNot __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolNot - determ: {#0 (ctxt) -> <=[] ->[], #1 (arg) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0, 1] BoolNot - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0, 1] BoolNot - used final order: [#1 (arg)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0, 1] BoolNot ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.SpecialForm[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.SpecialForm[0, 1] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.SpecialForm[0, 1] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Definition.DefTypeIs[0, 1, 3] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1, 3] Here' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1, 3] Here' - determ: {#0 -> <=[] ->[], #1 -> <=[] ->[], #2 -> <=[] ->[], #3 -> <=[] ->[#0], #4 (ty) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1, 3] Here' - givs: [#0, #1, #2, #3, #4 (ty)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Definition.DefTypeIs[0, 1, 3] Here' - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1, 3] Here' ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1, 3] There' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1, 3] There' - determ: {#0 -> <=[] ->[], #1 -> <=[] ->[], #2 (ty) -> <=[] ->[], #3 (idx) -> <=[] ->[#0], #4 (rest) -> <=[] ->[#0], #5 -> <=[] ->[#0, #2 (ty), #3 (idx), #4 (rest)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1, 3] There' - givs: [#0, #1, #2 (ty), #4 (rest)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Definition.DefTypeIs[0, 1, 3] There' - used final order: [#5]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1, 3] There' ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Definition.DefTypeIs[0, 1, 3] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Definition.DefTypeIs[0, 1, 3] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Definition.DefTypeIs[0, 1, 3] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Prelude.Basics.Bool[] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Basics.Bool[] False __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Basics.Bool[] False - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Basics.Bool[] False - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Prelude.Basics.Bool[] False - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Basics.Bool[] False ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Basics.Bool[] True __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Basics.Bool[] True - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Basics.Bool[] True - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Prelude.Basics.Bool[] True - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Basics.Bool[] True ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Prelude.Basics.Bool[] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Prelude.Basics.Bool[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Prelude.Basics.Bool[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Types.Nat[] Z - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Types.Nat[] Z - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Prelude.Types.Nat[] Z - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] Z ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Types.Nat[] S - determ: {#0 -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Prelude.Types.Nat[] S - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Prelude.Types.Nat[] S - used final order: [#0]
[ build ] LOG deptycheck.derive.consBody:5: Prelude.Types.Nat[] S ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Prelude.Types.Nat[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Prelude.Types.Nat[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.Expr[0] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] IntLiteral __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] IntLiteral - determ: {#0 (ctxt) -> <=[] ->[], #1 (x) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] IntLiteral - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0] IntLiteral - used final order: [#1 (x)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] IntLiteral ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] BoolLiteral __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] BoolLiteral - determ: {#0 (ctxt) -> <=[] ->[], #1 (x) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] BoolLiteral - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0] BoolLiteral - used final order: [#1 (x)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] BoolLiteral ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] GetVar __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] GetVar - determ: {#0 (ty) -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 (idx) -> <=[#1 (ctxt)] ->[], #3 -> <=[#1 (ctxt)] ->[#0 (ty), #2 (idx)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] GetVar - givs: [#1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0] GetVar - used final order: [#3]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] GetVar ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] SpecForm __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] SpecForm - determ: {#0 (res) -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 -> <=[] ->[#0 (res), #1 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] SpecForm - givs: [#1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0] SpecForm - used final order: [#2]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] SpecForm ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] CallNamed __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] CallNamed - determ: {#0 (ctxt) -> <=[] ->[], #1 (parTypes) -> <=[] ->[], #2 (retTypes) -> <=[] ->[], #3 (idx) -> <=[#0 (ctxt)] ->[], #4 -> <=[#0 (ctxt), #1 (parTypes), #2 (retTypes)] ->[#3 (idx)], #5 (params) -> <=[] ->[#0 (ctxt), #1 (parTypes)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.Expr[0] CallNamed - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.Expr[0] CallNamed - used final order: [#1 (parTypes), #2 (retTypes), #4, #5 (params)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.Expr[0] CallNamed ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.Expr[0] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.Expr[0] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.Expr[0] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.Ty[] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Int' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Int' - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Int' - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Ty[] Int' - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Int' ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Bool' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Bool' - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Bool' - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Ty[] Bool' - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Bool' ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Func' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Func' - determ: {#0 -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Func' - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Ty[] Func' - used final order: [#0]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Func' ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Any' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Any' - determ: {}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.Ty[] Any' - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.Ty[] Any' - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.Ty[] Any' ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.Ty[] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.Ty[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.Ty[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.FuncTy[] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.FuncTy[] MkFuncTy __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.FuncTy[] MkFuncTy - determ: {#0 (arguments) -> <=[] ->[], #1 (returns) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Ty.FuncTy[] MkFuncTy - givs: []
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Ty.FuncTy[] MkFuncTy - used final order: [#0 (arguments), #1 (returns)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Ty.FuncTy[] MkFuncTy ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.FuncTy[] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Ty.FuncTy[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Ty.FuncTy[] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.SpecialForm[0] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] Print __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] Print - determ: {#0 -> <=[] ->[], #1 (ctxt) -> <=[] ->[], #2 (arg) -> <=[] ->[#0, #1 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] Print - givs: [#1 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] Print - used final order: [#2 (arg)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] Print ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntAdd __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntAdd - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntAdd - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] IntAdd - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntAdd ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntSub __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntSub - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntSub - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] IntSub - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntSub ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntMul __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntMul - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] IntMul - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] IntMul - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] IntMul ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolAnd __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolAnd - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolAnd - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] BoolAnd - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolAnd ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolOr __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolOr - determ: {#0 (ctxt) -> <=[] ->[], #1 (lhv) -> <=[] ->[#0 (ctxt)], #2 (rhv) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolOr - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] BoolOr - used final order: [#1 (lhv), #2 (rhv)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolOr ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolNot __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolNot - determ: {#0 (ctxt) -> <=[] ->[], #1 (arg) -> <=[] ->[#0 (ctxt)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Expr.SpecialForm[0] BoolNot - givs: [#0 (ctxt)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Expr.SpecialForm[0] BoolNot - used final order: [#1 (arg)]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Expr.SpecialForm[0] BoolNot ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.SpecialForm[0] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Expr.SpecialForm[0] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Expr.SpecialForm[0] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Definition.DefTypeIs[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1] Here' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1] Here' - determ: {#0 -> <=[] ->[], #1 -> <=[] ->[], #2 -> <=[] ->[], #3 -> <=[] ->[#0], #4 (ty) -> <=[] ->[]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1] Here' - givs: [#0, #1, #2, #3, #4 (ty)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Definition.DefTypeIs[0, 1] Here' - used final order: []
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1] Here' ^^  end  ^^
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1] There' __ start __
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1] There' - determ: {#0 -> <=[] ->[], #1 -> <=[] ->[], #2 (ty) -> <=[] ->[], #3 (idx) -> <=[] ->[#0], #4 (rest) -> <=[] ->[#0], #5 -> <=[] ->[#0, #2 (ty), #3 (idx), #4 (rest)]}
[ build ] LOG deptycheck.derive.least-effort:15: Language.Go.Definition.DefTypeIs[0, 1] There' - givs: [#0, #1, #4 (rest)]
[ build ] LOG deptycheck.derive.least-effort:10: Language.Go.Definition.DefTypeIs[0, 1] There' - used final order: [#5]
[ build ] LOG deptycheck.derive.consBody:5: Language.Go.Definition.DefTypeIs[0, 1] There' ^^  end  ^^
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Definition.DefTypeIs[0, 1] ___ start ___
[ build ] LOG deptycheck.derive.consRec:5: Language.Go.Definition.DefTypeIs[0, 1] ^^^  end  ^^^
[ build ] LOG deptycheck.derive.type:5: Language.Go.Definition.DefTypeIs[0, 1] ^^^  end  ^^^
[ build ] 4/4: Building Runner (src/Runner.idr)
[ build ] Now compiling the executable: go-model
[ build ] Warning: compiling hole Language.Go.genBlocks
